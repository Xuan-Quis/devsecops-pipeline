pipeline {
    agent any 
    tools {
        nodejs 'NodeJS-18'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('AWS-ACCOUNT-ID')
        AWS_ECR_REPO_NAME = credentials('ECR-frontend-id')
        AWS_DEFAULT_REGION = 'ap-southeast-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
        PROJECT_NAME = "angular-ecommerce"
        IMAGE_VERSION = "${PROJECT_NAME}:${BUILD_NUMBER}"
        TRIVYFS_REPORT = "trivyfs_scan_${PROJECT_NAME}_${BUILD_NUMBER}_report"
        TRIVY_IMAGE_REPORT = "security_scan_image_${PROJECT_NAME}_${BUILD_NUMBER}_report"
        ARACHNI_WEBSITE_REPORT = "security_scan_website_${PROJECT_NAME}_${BUILD_NUMBER}_report"
        K6_PERFORMANCE_TEST_REPORT = "performance_test_${PROJECT_NAME}_${BUILD_NUMBER}_report"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'Git-cred', url: '<your-repo-url>'
            }
        }
        
        stage('Node.js Dependencies Install') {
            steps {
                dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                    sh 'npm install --force'
                }
            }
        }
        
        stage('Angular Build') {
            steps {
                dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                    sh 'npm run build'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                    sh 'npm test -- --watch=false --browsers=ChromeHeadless --code-coverage'
                }
            }
            post {
                always {
                    dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                        publishTestResults testResultsPattern: '**/test-results.xml'
                        publishCoverage adapters: [lcovAdapter('coverage/lcov.info')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                    }
                }
            }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=angular-ecommerce \
                        -Dsonar.projectKey=angular-ecommerce \
                        -Dsonar.sources=src \
                        -Dsonar.tests=src \
                        -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
                        -Dsonar.coverage.exclusions=**/*.spec.ts,**/*.spec.js '''
                    }
                }
            }
        }
        
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                    dependencyCheck additionalArguments: '--scan . --disableYarnAudit --disableNodeAudit --format HTML --format JSON', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        
        stage('Trivy File Scan') {
            steps {
                dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                    sh 'trivy fs . --severity HIGH,CRITICAL --format template --template "@contrib/html.tpl" --output ${TRIVYFS_REPORT}.html'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "${TRIVYFS_REPORT}.html", allowEmptyArchive: true
                }
            }
        }
        
        stage('Snyk Security Scan') {
            steps {
                dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                    withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                        sh '''
                            docker build --rm --network host --build-arg SNYK_AUTH_TOKEN=$SNYK_TOKEN --build-arg OUTPUT_FILENAME=snyk_scan_report -t snyk_scan_report -f Dockerfile-snyk .
                            docker create --name snyk_scan_report snyk_scan_report
                            docker cp snyk_scan_report:/app/snyk_scan_report.html .
                            docker rm snyk_scan_report
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "snyk_scan_report.html", allowEmptyArchive: true
                }
            }
        }
        
        stage('Lighthouse Performance Audit') {
            steps {
                dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                    sh '''
                        docker run --rm -v $(pwd):/app -v /tmp:/tmp lighthouse/ci:latest \
                        --config-path=/app/.lighthouserc.js \
                        --output=html \
                        --output-path=/tmp/lighthouse-report.html \
                        --chrome-flags="--headless --no-sandbox --disable-gpu"
                        cp /tmp/lighthouse-report.html .
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "lighthouse-report.html", allowEmptyArchive: true
                }
            }
        }
        
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Fullstack-Ecommerce-Web/03-frontend_angular-ecommerce') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        
        stage("ECR Image Pushing") {
            steps {
                script {
                    sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                    sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                    sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image --format template --template "@contrib/html.tpl" --output ${TRIVY_IMAGE_REPORT}.html ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
            }
            post {
                always {
                    archiveArtifacts artifacts: "${TRIVY_IMAGE_REPORT}.html", allowEmptyArchive: true
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Deploy to Kubernetes cluster
                    sh '''
                        kubectl set image deployment/ecommerce-frontend ecommerce-frontend=${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} -n ecommerce
                        kubectl rollout status deployment/ecommerce-frontend -n ecommerce
                    '''
                }
            }
        }
        
        stage('Security Scan Website') {
            when {
                expression { env.ADDRESS_FRONTEND != null }
            }
            steps {
                script {
                    sh '''
                        docker run --rm -v /tmp/:/tmp/ devopseduvn/arachni:v1.4-0.5.10 bin/arachni --output-verbose --scope-include-subdomains ${ADDRESS_FRONTEND} --report-save-path=/tmp/${ARACHNI_WEBSITE_REPORT}.afr > /dev/null 2>&1
                        docker run --rm -v /tmp/:/tmp/ devopseduvn/arachni:v1.4-0.5.10 bin/arachni_reporter /tmp/${ARACHNI_WEBSITE_REPORT}.afr --reporter=html:outfile=/tmp/${ARACHNI_WEBSITE_REPORT}.html.zip
                        cp /tmp/${ARACHNI_WEBSITE_REPORT}.html.zip .
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "${ARACHNI_WEBSITE_REPORT}.html.zip", allowEmptyArchive: true
                }
            }
        }
        
        stage('Performance Testing with K6') {
            when {
                expression { env.ADDRESS_FRONTEND != null }
            }
            steps {
                script {
                    sh '''
                        docker run --rm -v $(pwd):/scripts -i grafana/k6 run --out json=/scripts/${K6_PERFORMANCE_TEST_REPORT}.json /scripts/performance-test-frontend.js
                        docker run --rm -v $(pwd):/scripts -i grafana/k6 run --out influxdb=http://influxdb:8086/k6 /scripts/performance-test-frontend.js
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "${K6_PERFORMANCE_TEST_REPORT}.json", allowEmptyArchive: true
                }
            }
        }
        
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "<your-repo-name>"
                GIT_USER_NAME = "<your-name>"
            }
            steps {
                dir('kubernetes-manifest/frontend') {
                    withCredentials([string(credentialsId: 'GITHUB', variable: 'Git-cred')]) {
                        sh '''
                            git config user.email "<your-email>"
                            git config user.name "<your-name>"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' frontend-deployment.yaml)
                            echo $imageTag
                            sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" frontend-deployment.yaml
                            git add frontend-deployment.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://<your-name>:<PAT-TOKEN>@github.com/<your-name>/<your-repo-name> HEAD:main
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup
            sh 'docker system prune -f || true'
            sh 'docker container prune -f || true'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
